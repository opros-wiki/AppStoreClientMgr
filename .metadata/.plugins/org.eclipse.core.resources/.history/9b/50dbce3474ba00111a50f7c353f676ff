
import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.*;

import javax.xml.parsers.*;

import org.w3c.dom.*;
import org.xeustechnologies.jtar.*;


public class BaseFunctions {
	
	static final int BUFFER = 2048;
	
	public static Document GetXMLDocument(String strURL, String paramStr, String method)
	{
		HttpURLConnection con;
		try
		{
			URL url = new URL(strURL); 
			
			con = (HttpURLConnection) url.openConnection();           
			con.setDoOutput(true);
			con.setDoInput(true);
			con.setInstanceFollowRedirects(false); 
			con.setRequestMethod(method); 
			con.setRequestProperty("Content-Type", "application/x-www-form-urlencoded"); 
			con.setRequestProperty("charset", "utf-8");
			con.setRequestProperty("Content-Length", "" + Integer.toString(paramStr.getBytes().length));
			con.setUseCaches (false);
	
			DataOutputStream wr = new DataOutputStream(con.getOutputStream ());
			wr.writeBytes(paramStr);
			wr.flush();
			wr.close();
			
			InputStream is = con.getInputStream();
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();

            Document doc = builder.parse(is);
            return doc;
		}
		catch (Exception e)
		{
			System.out.println("Error occured in XML Request:"+e.toString());
			return null;
		}
	}
	
	public static String GetTagContentFromXMLDoc(Document doc, String strTagName)
	{
		return GetTagContentFromNodeList(doc.getChildNodes(),strTagName);
	}
	
	public static String GetTagContentFromNodeList(NodeList nl, String strTagName)
	{
		String ret="";
		
        for ( int i = 0; i < nl.getLength(); i++ ) {
            Node n = nl.item( i );
            if (n.getNodeName().equals(strTagName))
            {
            	ret=n.getTextContent();
            	break;
            }
            else
            {
            	NodeList _child = n.getChildNodes();
                ret=GetTagContentFromNodeList(_child, strTagName);
            }
        }
		return ret;
	}
	
	public static List<Node> GetListFromXMLDoc(Document doc, String strTagName)
	{
		return GetListFromNodeList(doc.getChildNodes(),strTagName);
	}
	
	public static List<Node> GetListFromNodeList(NodeList nl, String strTagName)
	{
		List<Node> ret=new ArrayList<Node>();
        for ( int i = 0; i < nl.getLength(); i++ ) {
            Node n = nl.item( i );
            if (n.getNodeName().equals(strTagName))
            {
            	ret.add(n);
            }
        }

        if (ret.isEmpty())
        {
        	for ( int i = 0; i < nl.getLength(); i++ ) {        	
        		Node n = nl.item( i );            
	        	NodeList _child = n.getChildNodes();
	            ret=GetListFromNodeList(_child, strTagName);
	            if (!ret.isEmpty())
	            	break;
	        }
        }
		return ret;
	}
	
	public static void PrintXMLDoc(Document doc)
	{
		PrintNodeList(doc.getChildNodes());
	}
	
	public static void PrintNodeList(NodeList nl)
	{
		for ( int i = 0; i < nl.getLength(); i++ ) {
            Node n = nl.item( i );
            if (n.hasChildNodes())
            {
            	NodeList _child = n.getChildNodes();
            	PrintNodeList(_child);
            }
            else if (n.getNodeName()!=null)
            {
            	System.out.println(n.getNodeName()+":"+n.getTextContent());
            }
        }
	}
	
public static int Downloader(String strURL, String strTargetPath)
	{
		try
		{
	        // URL Connection
	        URL url = new URL(strURL);
	        url.openConnection();
	        InputStream reader = url.openStream();
	  
	        // Download destination
	        FileOutputStream writer = new FileOutputStream(strTargetPath);
	        
	        // Prepare buffer
	        byte[] buffer = new byte[153600];
	        int totalBytesRead = 0;
	        int bytesRead = 0;
	  
	        // Start download
	        while ((bytesRead = reader.read(buffer)) > 0)
	        {  
	           writer.write(buffer, 0, bytesRead);
	           buffer = new byte[153600];
	           totalBytesRead += bytesRead;
	        }
	  	        
	        writer.close();
	        reader.close();
	        return totalBytesRead;
		}
	    catch (MalformedURLException e)
	    {
	        e.printStackTrace();
	        return 0;
	    }
	    catch (IOException e)
	    {
	        e.printStackTrace();
	        return 0;
	    }
	}
	
	public static boolean Untar(String zipFilePath, String unZipDir)
	{
		try {
			String destFolder = unZipDir;
	        File zf = new File( zipFilePath );
	
	        TarInputStream tis;
		
			tis = new TarInputStream( new BufferedInputStream( new FileInputStream(zf) ) );     
        
			BufferedOutputStream dest = null;
	
	        TarEntry entry;
	        while (( entry = tis.getNextEntry() ) != null) {
	            System.out.println( "Extracting: " + entry.getName() );
	            int count;
	            byte data[] = new byte[BUFFER];
	
	            if (entry.isDirectory()) {
	                new File( destFolder + "/" + entry.getName() ).mkdirs();
	                continue;
	            } else {
	                int di = entry.getName().lastIndexOf( '/' );
	                if (di != -1) {
	                    new File( destFolder + "/" + entry.getName().substring( 0, di ) ).mkdirs();
	                }
	            }
	
	            FileOutputStream fos = new FileOutputStream( destFolder + "/" + entry.getName() );
	            dest = new BufferedOutputStream( fos );
	
	            while (( count = tis.read( data ) ) != -1) {
	                dest.write( data, 0, count );
	            }
	
	            dest.flush();
	            dest.close();
	        }
	        tis.close();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return true;
	}
	
	public static boolean DeletePath(String strFolderPath)
	{
		File dir = new File(strFolderPath);
		if (dir.isDirectory())
		{
			String[] children = dir.list();
	        for (int i=0; i<children.length; i++) {
	            boolean success = DeletePath(dir.getAbsolutePath()+"\\"+children[i]);
	            if (!success) {
	                return false;
	            }
	        }
		}
		return dir.delete();
	}
}
